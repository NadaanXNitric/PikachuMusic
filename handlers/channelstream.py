import json
import os
from os import path
from typing import Callable

import aiofiles
import aiohttp
import ffmpeg
import requests
import wget
from PIL import Image, ImageDraw, ImageFont
from pyrogram import Client, filters
from pyrogram.errors import UserAlreadyParticipant
from pyrogram.types import Voice
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from youtube_search import YoutubeSearch
from handlers.play import generate_cover
from handlers.play import cb_admin_check
from handlers.play import transcode
from handlers.play import convert_seconds
from handlers.play import time_to_seconds
from handlers.play import changeImageSize
from config import BOT_NAME as bn
from config import DURATION_LIMIT
from config import UPDATES_CHANNEL as updateschannel
from config import que
from cache.admins import admins as a
from helpers.errors import DurationLimitError
from helpers.decorators import errors
from helpers.admins import get_administrators
from helpers.channelmusic import get_chat_id
from helpers.decorators import authorized_users_only
from helpers.filters import command, other_filters
from helpers.gets import get_file_name
from callsmusic import callsmusic
from callsmusic.callsmusic import client as USER
from converter.converter import convert
from downloaders import youtube
from callsmusic.queues import queues

chat_id = None



@Client.on_message(filters.command(["channelplaylist","cplaylist"]) & filters.group & ~filters.edited)
async def playlist(client, message):
    try:
      lel = await client.get_chat(message.chat.id)
      lol = lel.linked_chat.id
    except:
      message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, …™s  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ?")
      return
    global que
    queue = que.get(lol)
    if not queue:
        await message.reply_text("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ò ü·¥Ä è·¥á Ä …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ!")
    temp = []
    for t in queue:
        temp.append(t)
    now_playing = temp[0][0]
    by = temp[0][1].mention(style="md")
    msg = "**N·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢** …™…¥ {}".format(lel.linked_chat.title)
    msg += "\n- " + now_playing
    msg += "\n- R·¥á«´·¥ú·¥ás·¥õ  ô è :" + by
    temp.pop(0)
    if temp:
        msg += "\n\n"
        msg += "**Q·¥ú·¥á·¥ú·¥á**"
        for song in temp:
            name = song[0]
            usr = song[1].mention(style="md")
            msg += f"\n- {name}"
            msg += f"\n- R·¥á«´·¥ú·¥ás·¥õ  ô è : {usr}\n"
    await message.reply_text(msg)


# ============================= Settings =========================================


def updated_stats(chat, queue, vol=100):
    if chat.id in callsmusic.pytgcalls.active_calls:
        # if chat.id in active_chats:
        stats = "S·¥á·¥õ·¥õ…™…¥…¢s ·¥è“ì **{}**".format(chat.title)
        if len(que) > 0:
            stats += "\n\n"
            stats += "V·¥è ü·¥ú·¥ç·¥á : {}%\n".format(vol)
            stats += "S·¥è…¥…¢s …™…¥ «´·¥ú·¥á·¥ú·¥á : `{}`\n".format(len(que))
            stats += "N·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢ : **{}**\n".format(queue[0][0])
            stats += "R·¥á«´·¥ú·¥ás·¥õ  ô è : {}".format(queue[0][1].mention)
    else:
        stats = None
    return stats


def r_ply(type_):
    if type_ == "play":
        pass
    else:
        pass
    mar = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚èπ", "cleave"),
                InlineKeyboardButton("‚è∏", "cpuse"),
                InlineKeyboardButton("‚ñ∂Ô∏è", "cresume"),
                InlineKeyboardButton("‚è≠", "cskip"),
            ],
            [
                InlineKeyboardButton("·¥ò ü·¥Ä è ü…™s·¥õ üìñ", "cplaylist"),
            ],
            [InlineKeyboardButton("‚ùå ·¥Ñ ü·¥ès·¥á", "ccls")],
        ]
    )
    return mar


@Client.on_message(filters.command(["channelcurrent","ccurrent"]) & filters.group & ~filters.edited)
async def ee(client, message):
    try:
      lel = await client.get_chat(message.chat.id)
      lol = lel.linked_chat.id
      conv = lel.linked_chat
    except:
      await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, …™s  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ?")
      return
    queue = que.get(lol)
    stats = updated_stats(conv, queue)
    if stats:
        await message.reply(stats)
    else:
        await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ò ü·¥á·¥Äs·¥á ·¥õ·¥ú Ä…¥ ·¥è…¥ ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ “ì…™ Äs·¥õ!")


@Client.on_message(filters.command(["channelplayer","cplayer"]) & filters.group & ~filters.edited)
@authorized_users_only
async def settings(client, message):
    playing = None
    try:
      lel = await client.get_chat(message.chat.id)
      lol = lel.linked_chat.id
      conv = lel.linked_chat
    except:
      await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, …™s  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ?")
      return
    queue = que.get(lol)
    stats = updated_stats(conv, queue)
    if stats:
        if playing:
            await message.reply(stats, reply_markup=r_ply("pause"))

        else:
            await message.reply(stats, reply_markup=r_ply("play"))
    else:
        await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ò ü·¥á·¥Äs·¥á ·¥õ·¥ú Ä…¥ ·¥è…¥ ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ “ì…™ Äs·¥õ!")


@Client.on_callback_query(filters.regex(pattern=r"^(cplaylist)$"))
async def p_cb(b, cb):
    global que
    try:
      lel = await client.get_chat(cb.message.chat.id)
      lol = lel.linked_chat.id
      conv = lel.linked_chat
    except:
      return    
    que.get(lol)
    type_ = cb.matches[0].group(1)
    cb.message.chat.id
    cb.message.chat
    cb.message.reply_markup.inline_keyboard[1][0].callback_data
    if type_ == "playlist":
        queue = que.get(lol)
        if not queue:
            await cb.message.edit("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ò ü·¥Ä è·¥á Ä …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ!")
        temp = []
        for t in queue:
            temp.append(t)
        now_playing = temp[0][0]
        by = temp[0][1].mention(style="md")
        msg = "**N·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢** in {}".format(conv.title)
        msg += "\n- " + now_playing
        msg += "\n- R·¥á«´·¥ú·¥ás·¥õ  ô è : " + by
        temp.pop(0)
        if temp:
            msg += "\n\n"
            msg += "**Q·¥ú·¥á·¥ú·¥á**"
            for song in temp:
                name = song[0]
                usr = song[1].mention(style="md")
                msg += f"\n- {name}"
                msg += f"\n- R·¥á«´·¥ú·¥ás·¥õ  ô è : {usr}\n"
        await cb.message.edit(msg)


@Client.on_callback_query(
    filters.regex(pattern=r"^(cplay|cpause|cskip|cleave|cpuse|cresume|cmenu|ccls)$")
)
@cb_admin_check
async def m_cb(b, cb):
    global que
    if (
        cb.message.chat.title.startswith("Channel Music : ")
        and chat.title[14:].isnumeric()
    ):
        chet_id = int(chat.title[13:])
    else:
      try:
        lel = await b.get_chat(cb.message.chat.id)
        lol = lel.linked_chat.id
        conv = lel.linked_chat
        chet_id = lol
      except:
        return
    qeue = que.get(chet_id)
    type_ = cb.matches[0].group(1)
    cb.message.chat.id
    m_chat = cb.message.chat
    

    the_data = cb.message.reply_markup.inline_keyboard[1][0].callback_data
    if type_ == "cpause":
        if (chet_id not in callsmusic.pytgcalls.active_calls) or (
            callsmusic.pytgcalls.active_calls[chet_id] == "paused"
        ):
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!", show_alert=True)
        else:
            callsmusic.pytgcalls.pause_stream(chet_id)

            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò·¥Ä·¥ús·¥á·¥Ö!")
            await cb.message.edit(
                updated_stats(conv, qeue), reply_markup=r_ply("play")
            )

    elif type_ == "cplay":
        if (chet_id not in callsmusic.pytgcalls.active_calls) or (
            callsmusic.pytgcalls.active_calls[chet_id] == "playing"
        ):
            await cb.answer("·¥ò…™·¥ã·¥Ä ·¥ò…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!", show_alert=True)
        else:
            callsmusic.pytgcalls.resume_stream(chet_id)
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç  Ä·¥ás·¥ú·¥ç·¥á·¥Ö!")
            await cb.message.edit(
                updated_stats(conv, qeue), reply_markup=r_ply("pause")
            )

    elif type_ == "cplaylist":
        queue = que.get(cb.message.chat.id)
        if not queue:
            await cb.message.edit("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ò ü·¥Ä è·¥á Ä …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ!")
        temp = []
        for t in queue:
            temp.append(t)
        now_playing = temp[0][0]
        by = temp[0][1].mention(style="md")
        msg = "**N·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢** in {}".format(cb.message.chat.title)
        msg += "\n- " + now_playing
        msg += "\n- R·¥á«´·¥ú·¥ás·¥õ  ô è : " + by
        temp.pop(0)
        if temp:
            msg += "\n\n"
            msg += "**Q·¥ú·¥á·¥ú·¥á**"
            for song in temp:
                name = song[0]
                usr = song[1].mention(style="md")
                msg += f"\n- {name}"
                msg += f"\n- R·¥á«´·¥ú·¥ás·¥õ  ô è : {usr}\n"
        await cb.message.edit(msg)

    elif type_ == "cresume":
        if (chet_id not in callsmusic.pytgcalls.active_calls) or (
            callsmusic.pytgcalls.active_calls[chet_id] == "playing"
        ):
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!", show_alert=True)
        else:
            callsmusic.pytgcalls.resume_stream(chet_id)
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò·¥Ä·¥ús·¥á·¥Ö!")
    elif type_ == "cpuse":
        if (chet_id not in callsmusic.pytgcalls.active_calls) or (
            callsmusic.pytgcalls.active_calls[chet_id] == "paused"
        ):
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥è Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥Ä·¥ús·¥á·¥Ö", show_alert=True)
        else:
            callsmusic.pytgcalls.pause_stream(chet_id)

            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò·¥Ä·¥ús·¥á·¥Ö!")
    elif type_ == "ccls":
        await cb.answer("·¥Ñ ü·¥ès·¥á·¥Ö ·¥ç·¥á…¥·¥ú.")
        await cb.message.delete()

    elif type_ == "cmenu":
        stats = updated_stats(conv, qeue)
        await cb.answer("·¥ç·¥á…¥·¥ú ·¥è·¥ò·¥á…¥·¥á·¥Ö.")
        marr = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚èπ", "cleave"),
                    InlineKeyboardButton("‚è∏", "cpuse"),
                    InlineKeyboardButton("‚ñ∂Ô∏è", "cresume"),
                    InlineKeyboardButton("‚è≠", "cskip"),
                ],
                [
                    InlineKeyboardButton("·¥ò ü·¥Ä è ü…™s·¥õ üìñ", "cplaylist"),
                ],
                [InlineKeyboardButton("‚ùå ·¥Ñ ü·¥ès·¥á", "ccls")],
            ]
        )
        await cb.message.edit(stats, reply_markup=marr)
    elif type_ == "cskip":
        if qeue:
            qeue.pop(0)
        if chet_id not in callsmusic.pytgcalls.active_calls:
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!", show_alert=True)
        else:
            queues.task_done(chet_id)

            if queues.is_empty(chet_id):
                callsmusic.pytgcalls.leave_group_call(chet_id)

                await cb.message.edit("- P…™·¥ã·¥Ä P…™·¥ã·¥Ä, …¥·¥è ·¥ç·¥è Ä·¥á ·¥ò ü·¥Ä è ü…™s·¥õ..\…¥-  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ!")
            else:
                callsmusic.pytgcalls.change_stream(
                    chet_id, queues.get(chet_id)["file"]
                )
                await cb.answer("Skipped")
                await cb.message.edit((m_chat, qeue), reply_markup=r_ply(the_data))
                await cb.message.reply_text(
                    f"- P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç s·¥ã…™·¥ò·¥ò·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã.\n- …¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢ : **{qeue[0][0]}**."
                )

    else:
        if chet_id in callsmusic.pytgcalls.active_calls:
            try:
                queues.clear(chet_id)
            except QueueEmpty:
                pass

            callsmusic.pytgcalls.leave_group_call(chet_id)
            await cb.message.edit("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥°·¥Äs ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ!")
        else:
            await cb.answer("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!", show_alert=True)


@Client.on_message(filters.command(["channelplay","cplay"])  & filters.group & ~filters.edited)
@authorized_users_only
async def play(_, message: Message):
    global que
    lel = await message.reply("üîÅ **P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...**")

    try:
      conchat = await _.get_chat(message.chat.id)
      conv = conchat.linked_chat
      conid = conchat.linked_chat.id
      chid = conid
    except:
      await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!")
      return
    try:
      administrators = await get_administrators(conv)
    except:
      await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, …™'·¥ç …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü, s·¥è Ä Ä è !")
    try:
        user = await USER.get_me()
    except:
        user.first_name = "helper"
    usar = user
    wew = usar.id
    try:
        # chatdetails = await USER.get_chat(chid)
        await _.get_chat_member(chid, wew)
    except:
        for administrator in administrators:
            if administrator == message.from_user.id:
                if message.chat.title.startswith("Channel Music : "):
                    await lel.edit(
                        "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä,  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  ú·¥á ü·¥ò·¥á Ä ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.</b>",
                    )
                    pass

                try:
                    invitelink = await _.export_chat_invite_link(chid)
                except:
                    await lel.edit(
                        "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥ ·¥è“ì  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ.</b>",
                    )
                    return

                try:
                    await USER.join_chat(invitelink)
                    await lel.edit(
                        "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä,  ú·¥á ü·¥ò·¥á Ä ·¥ús·¥á Ä ô·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.</b>",
                    )

                except UserAlreadyParticipant:
                    pass
                except Exception:
                    # print(e)
                    await lel.edit(
                        f"<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, üî¥ “ì ü·¥è·¥è·¥Ö ·¥°·¥Ä…™·¥õ ·¥á Ä Ä·¥è Ä üî¥ \n·¥ús·¥á Ä {user.first_name} ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ ·¥ä·¥è…™…¥  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ö·¥ú·¥á ·¥õ·¥è  ú·¥á·¥Ä·¥† è  Ä·¥á«´·¥ú·¥ás·¥õs “ì·¥è Ä ·¥ús·¥á Ä ô·¥è·¥õ! ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥ús·¥á Ä …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò."
                        "\n\n·¥è Ä ·¥ç·¥Ä…¥·¥ú·¥Ä ü ü è ·¥Ä·¥Ö·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</b>",
                    )
    try:
        await USER.get_chat(chid)
        # lmoa = await client.get_chat_member(chid,wew)
    except:
        await lel.edit(
            f"<i> P…™·¥ã·¥Ä P…™·¥ã·¥Ä, {user.first_name} ·¥ús·¥á Ä ô·¥è·¥õ …¥·¥è·¥õ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ, ·¥Äs·¥ã ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è s·¥á…¥·¥Ö /play ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä “ì…™ Äs·¥õ ·¥õ…™·¥ç·¥á ·¥è Ä ·¥Ä·¥Ö·¥Ö {user.first_name} ·¥ç·¥Ä…¥·¥ú·¥Ä ü ü è.</i>"
        )
        return
    message.from_user.id
    text_links = None
    message.from_user.first_name
    await lel.edit("üîé **P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç “ì…™…¥·¥Ö…™…¥…¢...**")
    message.from_user.id
    user_id = message.from_user.id
    message.from_user.first_name
    user_name = message.from_user.first_name
    rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
    if message.reply_to_message:
        entities = []
        toxt = message.reply_to_message.text or message.reply_to_message.caption
        if message.reply_to_message.entities:
            entities = message.reply_to_message.entities + entities
        elif message.reply_to_message.caption_entities:
            entities = message.reply_to_message.entities + entities
        urls = [entity for entity in entities if entity.type == 'url']
        text_links = [
            entity for entity in entities if entity.type == 'text_link'
        ]
    else:
        urls=None
    if text_links:
        urls = True    
    audio = (
        (message.reply_to_message.audio or message.reply_to_message.voice)
        if message.reply_to_message
        else None
    )
    if audio:
        if round(audio.duration / 60) > DURATION_LIMIT:
            raise DurationLimitError(
                f"P…™·¥ã·¥Ä P…™·¥ã·¥Ä, E Ä Ä·¥è Ä !!üõë S·¥è Ä Ä è, ·¥è…¥ ü è {DURATION_LIMIT} ·¥ç…™…¥·¥ú·¥õ·¥ás s·¥è…¥…¢ …™s ·¥Ä ü ü·¥è·¥°·¥á·¥Ö."
            )
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚è∫ ·¥ç·¥á…¥·¥ú", callback_data="cmenu"),
                    InlineKeyboardButton("üóë ·¥Ñ ü·¥ès·¥á", callback_data="ccls"),
                ],
                [InlineKeyboardButton(text="üéß ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/Sanki_BOTs")],
            ]
        )
        file_name = get_file_name(audio)
        title = file_name
        thumb_name = "https://telegra.ph/file/c9d2497b8e65acd354529.jpg"
        thumbnail = thumb_name
        duration = round(audio.duration / 60)
        views = "Locally added"
        requested_by = message.from_user.first_name
        await generate_cover(requested_by, title, views, duration, thumbnail)
        file_path = await convert(
            (await message.reply_to_message.download(file_name))
            if not path.isfile(path.join("downloads", file_name))
            else file_name
        )
    elif urls:
        query = toxt
        await lel.edit("üîÅ **P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...**")
        ydl_opts = {"format": "bestaudio/best"}
        try:
            results = YoutubeSearch(query, max_results=1).to_dict()
            url = f"https://youtube.com{results[0]['url_suffix']}"
            # print(results)
            title = results[0]["title"][:40]
            thumbnail = results[0]["thumbnails"][0]
            thumb_name = f"thumb{title}.jpg"
            thumb = requests.get(thumbnail, allow_redirects=True)
            open(thumb_name, "wb").write(thumb.content)
            duration = results[0]["duration"]
            results[0]["url_suffix"]
            views = results[0]["views"]

        except Exception as e:
            await lel.edit(
                "‚ùå P…™·¥ã·¥Ä P…™·¥ã·¥Ä, s·¥è…¥…¢ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö, ·¥ò ü·¥á·¥Äs·¥á …¢…™·¥†·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á."
            )
            print(str(e))
            return
        dlurl = url
        dlurl=dlurl.replace("youtube","youtubepp")
        keyboard = InlineKeyboardMarkup(
          [
              [
                  InlineKeyboardButton("‚è∫ ·¥ç·¥á…¥·¥ú", callback_data="cmenu"),
                  InlineKeyboardButton("üóë ·¥Ñ ü·¥ès·¥á", callback_data="ccls")
              ],[
                  InlineKeyboardButton("üéß ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/Sanki_BOTs")
              ]
          ]
        )
        requested_by = message.from_user.first_name
        await generate_cover(requested_by, title, views, duration, thumbnail)
        file_path = await convert(youtube.download(url))        
    else:
        query = ""
        for i in message.command[1:]:
            query += " " + str(i)
        print(query)
        await lel.edit("üîÅ **P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ·¥Ä·¥ç ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...**")
        ydl_opts = {"format": "bestaudio/best"}
        try:
            results = YoutubeSearch(query, max_results=1).to_dict()
            url = f"https://youtube.com{results[0]['url_suffix']}"
            # print(results)
            title = results[0]["title"][:40]
            thumbnail = results[0]["thumbnails"][0]
            thumb_name = f"thumb{title}.jpg"
            thumb = requests.get(thumbnail, allow_redirects=True)
            open(thumb_name, "wb").write(thumb.content)
            duration = results[0]["duration"]
            results[0]["url_suffix"]
            views = results[0]["views"]

        except Exception as e:
            await lel.edit(
                "‚ùå P…™·¥ã·¥Ä P…™·¥ã·¥Ä, s·¥è…¥…¢ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö, ·¥ò ü·¥á·¥Äs·¥á …¢…™·¥†·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á."
            )
            print(str(e))
            return

        dlurl = url
        dlurl=dlurl.replace("youtube","youtubepp")
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚è∫ ·¥ç·¥á…¥·¥ú", callback_data="cmenu"),
                    InlineKeyboardButton("üóë ·¥Ñ ü·¥ès·¥á", callback_data="ccls")
                ],[
                    InlineKeyboardButton("üéß ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/Sanki_BOTs")
                ]
            ]
        )
        requested_by = message.from_user.first_name
        await generate_cover(requested_by, title, views, duration, thumbnail)
        file_path = await convert(youtube.download(url))
    chat_id = chid
    if chat_id in callsmusic.pytgcalls.active_calls:
        position = await queues.put(chat_id, file=file_path)
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        await message.reply_photo(
            photo="final.png",
            caption=f"#‚É£  Your Requested Song **queued** At Position {position} !",
            reply_markup=keyboard,
        )
        os.remove("final.png")
        return await lel.delete()
    else:
        chat_id = chid
        que[chat_id] = []
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        callsmusic.pytgcalls.join_group_call(chat_id, file_path)
        await message.reply_photo(
            photo="final.png",
            reply_markup=keyboard,
            caption=f"üéß **Playing** The Song Requested By {} .".format(
                message.from_user.mention()
            ),
        )
        os.remove("final.png")
        return await lel.delete()
